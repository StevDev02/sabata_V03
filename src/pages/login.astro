---
// Components Astro
import Login_Layout from "../layout/Layout.astro";
// Sections
import Login_Page from "@/components/auth/login/Login_Page.astro";
// Firebase
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";


const auth = getAuth(app);
const sessionCookieObj = Astro.cookies.get("__session");

try {
  if (sessionCookieObj) {
    const sessionCookie = sessionCookieObj.value;
    const decodedCookie = await auth.verifySessionCookie(sessionCookie);
    if (decodedCookie) {
      return Astro.redirect("/es/shop");
    }
  }
} catch (error) {
  console.error("Error verifying login session:", error);
  return Astro.redirect("/login");
}
---

<Login_Layout
  title_page="Iniciar Sesion"
  description_page=""
  last_update="2024-05-02"
  keywords_page={[""]}
>
  <Login_Page />
</Login_Layout>

<script>
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
    GoogleAuthProvider,
    signInWithPopup,
  } from "firebase/auth";
  import { app } from "../firebase/client";

  const auth = getAuth(app);
  // This will prevent the browser from storing session data
  auth.setPersistence(inMemoryPersistence);

  const form = document.querySelector("form") as HTMLFormElement;
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const email = formData.get("email")?.toString();
    const password = formData.get("password")?.toString();

    if (!email || !password) {
      console.log("Email or password missing!");
      return;
    }
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const idToken = await userCredential.user.getIdToken();
      const response = await fetch("/api/auth/login", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
      });
      if (!response.redirected) {
        window.location.reload();
      } else {
        window.location.assign(response.url);
      }
    } catch (error) {
      console.error("Error during sign in:", error);
    }
  });

  const googleSignin = document.querySelector("#google") as HTMLButtonElement;
  googleSignin.addEventListener("click", async () => {
    const provider = new GoogleAuthProvider();
    try {
      const userCredential = await signInWithPopup(auth, provider);
      const idToken = await userCredential.user.getIdToken();
      const res = await fetch("/api/auth/login", {
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
      });
      if (!res.redirected) {
        window.location.reload();
      } else {
        window.location.assign(res.url);
      }
    } catch (error) {
      console.error("Error during Google sign-in:", error);
    }
  });
</script>
